package go_sklearn_predict

import (
	"math"
	"testing"
)

func TestMLPRegressor_Predict(t *testing.T) {
	layers := []int{10, 1, 1}
	weights := [][][]float64{{
		{0.23955196220060665, -0.4833365639571145, -0.02882108282421239, 0.8086791924396948, 0.001238033830076568, 0.5436325097005434, -0.7939697855447275, -0.35477664770157197, -0.6196229172559513, -0.04086170850160056}, {0.21080260213967003, -0.016947480819646518, -0.47078925453421766, -0.828850192645524, 0.0015675665295617036, -0.13439220008321648, 0.05084160793785028, 0.7508028759484997, -0.13041460154989132, 0.34064565972432015}}, {{-0.37980329265355667}, {-0.02050901310476711}, {-0.1246687052201297}, {0.7061222810797698}, {0.04922715558728046}, {0.4135797405772913}, {-0.3710555596955594}, {0.4654056162806407}, {-0.8915039139149435}, {-0.43325717272497455}}, {{1.9514924912821343}}}
	bias := [][]float64{{-0.7007096841009854, -0.5141586247437274, 0.3400949213026467, -0.1831267967209588, -0.3459176230362645, -0.16837349700840223, 0.061067063574615846, -0.2727380089268602, 0.0876780617762567, 0.3816604092498808}, {0.7437439787193479}, {-1.297140516754923}}

	reg := NewMLPRegressor(ActivationRelu, layers, weights, bias)

	data := []struct {
		x []float64
		y float64
	}{
		{x: []float64{1.23204487, 1.36585291}, y: 0.02397118},
		{x: []float64{0.73904634, -2.61949332}, y: 3.81224596},
		{x: []float64{0.274291, -1.13246885}, y: 1.28398998},
		{x: []float64{-1.68769633, 1.40772776}, y: -1.29714052},
	}

	delta := 0.0001

	for _, item := range data {
		y, err := reg.Predict(item.x)
		if err != nil {
			t.Fatalf(``)
		}

		if math.Abs(y-item.y) > delta {
			t.Fatalf(``)
		}
	}

}
